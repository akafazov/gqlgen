package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/akafazov/gqlgen/graph/model"
)

// User is the resolver for the user field.
func (r *meetupResolver) User(ctx context.Context, obj *model.Meetup) (*model.User, error) {
	user := new(model.User)

	for _, u := range users {
		if u.ID == obj.User.ID {
			user = u
			break
		}
	}
	if user == nil {
		return nil, fmt.Errorf("user not found")
	}
	return user, nil
}

// CreateMeetup is the resolver for the createMeetup field.
func (r *mutationResolver) CreateMeetup(ctx context.Context, input model.NewMeetup) (*model.Meetup, error) {
	m := &model.Meetup{
		ID:          fmt.Sprintf("T%d", len(meetups)+1),
		Name:        input.Name,
		Description: input.Description,
		User:        users[0],
	}
	meetups = append(meetups, m)
	return m, nil
}

// Meetups is the resolver for the meetups field.
func (r *queryResolver) Meetups(ctx context.Context) ([]*model.Meetup, error) {
	return meetups, nil
}

// Meetup returns MeetupResolver implementation.
func (r *Resolver) Meetup() MeetupResolver { return &meetupResolver{r} }

type meetupResolver struct{ *Resolver }
